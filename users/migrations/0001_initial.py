# Generated by Django 3.2 on 2021-04-15 21:10

import ckeditor.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('description', ckeditor.fields.RichTextField(blank=True, verbose_name='Описание')),
                ('image', models.ImageField(upload_to=users.models.upload_to_item, verbose_name='Иконка')),
                ('item_type', models.CharField(
                    choices=[('WPN', 'Оружие 1слот'), ('GUN', 'Оружие 2слот'), ('ARM', 'Броня'),
                             ('AMMO1', 'Аммуниция 1слот'), ('AMMO2', 'Аммуниция 2слот'), ('GRND', 'Гранаты'),
                             ('ADD', 'Аддоны'), ('WUP', 'Апгрейды 1слот'), ('GUP', 'Апгрейды 2слот'),
                             ('AUP', 'Апгрейды брони')], max_length=5, verbose_name='Тип снаряжения')),
            ],
        ),
        migrations.CreateModel(
            name='EquipItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.SmallIntegerField(default=100, verbose_name='Состояние')),
                ('quantity', models.SmallIntegerField(default=0, verbose_name='Колличество')),
                ('capacity', models.SmallIntegerField(default=0, verbose_name='Заряд')),
                ('item',
                 models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.inventoryitem',
                                   verbose_name='Объект')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(upload_to='avatar')),
                ('ip', models.GenericIPAddressField(verbose_name='IP')),
                ('birthday', models.DateField(verbose_name='День рождения')),
                ('country', models.CharField(blank=True, max_length=200, null=True, verbose_name='Страна')),
                ('state', models.CharField(blank=True, max_length=200, null=True, verbose_name='Город')),
                ('signature', ckeditor.fields.RichTextField(blank=True, verbose_name='Подпись')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Титул')),
                ('gender', models.CharField(choices=[('M', 'Man'), ('W', 'Woman')], max_length=1, verbose_name='Пол')),
                ('rank', models.SmallIntegerField(default=0)),
                ('respect', models.SmallIntegerField(default=0, verbose_name='Репутация')),
                ('banreason', models.TextField(default='', verbose_name='Причины блокировки')),
                ('addon1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='uaddon1', to='users.equipitem')),
                ('addon2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='uaddon2', to='users.equipitem')),
                ('addon3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                             related_name='uaddon3', to='users.equipitem')),
                ('ammo1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='uammo1', to='users.inventoryitem')),
                ('ammo2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='uammo2', to='users.inventoryitem')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('slot1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='uslot1', to='users.equipitem')),
                ('slot2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='uslot2', to='users.equipitem')),
                ('slot3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                            related_name='uslot3', to='users.equipitem')),
                ('upgrade1', models.ManyToManyField(blank=True, related_name='user_upgr1', to='users.InventoryItem')),
                ('upgrade2', models.ManyToManyField(blank=True, related_name='user_upgr2', to='users.InventoryItem')),
                ('upgrade3', models.ManyToManyField(blank=True, related_name='user_upgr3', to='users.InventoryItem')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
